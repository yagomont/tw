#!/bin/bash
# server restarter watchdog

# do not edit unless making a commit
version="1.5: Apple Jelly"
# defaults
pack="Enigmatica 2 Expert"
packid="enig"
cfgfile="/home/minecraft/watchdog.cfg"
logfile="/home/minecraft/watchdog.log"
modfile="/home/minecraft/watchdog.mod"
modload="/home/minecraft/watchdog.cfg"
lock="/home/minecraft/wlock"

# load variables
# will override defaults
. $cfgfile 2>/dev/null || echo "Failed to load configuration at" $cfgfile ", using defaults"

#lock="/home/yago/wlock"

# fix permissions
chmod +x $cfgfile 2>/dev/null
chmod +x $modfile 2>/dev/null

# packid handler
packidAppend=$(echo $packid)
packidString="Server"
packid=$packidAppend$packidString

intro(){
echo "ToastedWatchdog for "$pack" by yagoply"
echo "Will start monitoring Minecraft in 8 seconds, press Ctrl+C to cancel."
#echo "Create "$lock" with touch command to stop the watchdog from doing anything."
echo "Run watchdog -h for help"
echo ""
}

startMinecraft(){
# uses a function I put in bashrc
# you can still point this to lgsm itself
packidAppend=$(echo $packidAppend)
packidString="Server"
packid=$packidAppend$packidString
bash /home/minecraft/$packid/$packidAppend start
}

stopMinecraft(){
# is actually safe
# don't freak out over sigkill
# sigterm wont do anything to frozen minecraft
# i don't even know why i put this here, but just to be safe.
# you can comment this line if you want
killall -s 9 java
}

broadcast(){
if [ "$daemonized" == "true" ]; then
echo "(debug/sent)"$msg
tmux send -t $packidAppend say "$msg" ENTER
msg=""
else 
echo "(debug/silenced)"$msg
fi
}

warnRestart(){
sleep 100
msg=" §2[ToastedWatchdog]§r Restarted server"; broadcast
}

mainLoop(){
# Avoid running if there is another watchdog open
wcheck=$(ps -u minecraft | grep -i watchdog | wc -l)
#echo $wcheck
if [ "$wcheck" -lt "3" ]; then
echo "(wcheck)" "Starting watchdog on "$packidAppend"..."
echo "(debug)" "PackidHandler: "$packidAppend","$packid
packAppend="§a, §adaemon §amode"
packd=$pack$packAppend
pmsg=" §2[ToastedWatchdog]§r §aStarted §aon §r";msg=$pmsg$packd; broadcast
pmsg=" §2[ToastedWatchdog]§r §aver. ";msg=$pmsg$version; broadcast 
else
echo "(wcheck)" "Another watchdog exists. Exiting with error code 1"
msg=" §4[ToastedWatchdog]§r §cAn §cattempt §cto §cstart §cthe §cwatchdog §cwas §cmade §cunsuccesfully."; broadcast
exit 1
fi

# Load modular functions. Can be loaded from external files as well.
. $modfile 2>/dev/null || echo "Can't find any external modules in" $modfile
# Register functions to be loaded
        isModLoadingPhase="true"
        export daemonized=$daemonized
        export lock=$lock
        export cfgfile=$cfgfile
        export packid=$packid
        export packidAppend=$packidAppend
        . $modload 2>/dev/null || echo "Can't find module loading directives in" $modload
# Complete module loading phase
        isModLoadingPhase="false"

sleep 3
while true; do
        sleep 5
        check=$(ps -e | grep -i java)
        if [ "$check" == "" ]; then
        # Minecraft is not running, reboot it!
        if [ "$daemonized" != "true" ]; then
        echo "(check)" Minecraft is not running.
        fi
        isRunning="no" # isRunning is here if you want to plug anything into this script
        echo $isRunning > .wcld.com
                if [ -f "$lock" ]; then
                if [ "$daemonized" != "true" ]; then
                echo Watchdog was locked by $lock, ignoring.
                fi
                else
                echo "(log)" Trying to start Minecraft on "["$(date)"], WT "$version >> $logfile
                stopMinecraft;
                startMinecraft;
                warnRestart &
                fi
        else
        # Minecraft is running, check again!
        if [ "$daemonized" != "true" ]; then
        echo "(check)" Minecraft is running.
        fi
        isRunning="yes"
        echo $isRunning > .wcld.com
        fi
done
}

showHelp(){
echo "ToastedWatchdog, a script by yagoply, version" $version
echo "A watchdog that restarts a Minecraft server automatically"
echo "Will log attempts to "$logfile
echo
echo "Usage:"
echo "-d : daemonize, run in as a service in the background"
echo "-l : lock, will lock the watchdog preventing it from doing anything"
echo "-ul : unlock, will unlock the daemon, restoring functionality."
echo "-k : kills the daemon, use if it goes rogue"
echo "-b : broadcast a message to the server"
echo "-h : display this message"
echo "Run watchdog without arguments for interactive mode. This will let you see what it's doing."
}

killWatchdog(){
echo Killing existing watchdog...
silenceString="-s"
if [ "$2" != "$silenceString" ]; then
daemonized="true"
else
daemonized="false"
echo "(debug)" "silenced"
fi
msg=" §4[ToastedWatchdog]§r §cStopped!"; broadcast
daemonized="false"
killall -s 9 watchdog || echo "(2) Could not find a watchdog to kill."; exit 2
killall -s 9 bash watchdog
exit 0
}

daemonize(){
echo "Creating a new daemon..."
echo "Press Ctrl+C to detach it, or leave your session."
export daemonized="true"
daemonized="true"
intro
mainLoop & disown
exit 0
}

lock(){
if [ -f "$lock" ]; then
echo "(3) Watchdog already locked"; exit 3
else
touch $lock
fi
}

unlock(){
rm $lock 2>/dev/null || echo "(4) Watchdog already unlocked"; exit 4
}

broadcastMessage(){
daemonized="true"
read -p "Broadcast to server: " append

tag=" §6§l[TW/Broadcast]§r "
msg=$tag$append; broadcast
daemonized="false"
}

broadcastInternal(){
daemonized="true"
tag=" §6[ToastedWatchdog]§r "
msg=$tag$msgAppend; broadcast
daemonized="false"
}


# detect arguments

case "$1" in 
        "-k")
                killWatchdog
                ;;
        "-h")
                showHelp
                ;;
        "")
                intro;  mainLoop
                ;;
        "-d")
                daemonize
                ;;
        "-l")
                lock
                ;;
        "-ul")
                unlock
                ;;
        "-b")
                broadcastMessage
                ;;
        "-i")
                broadcastInternal
                ;;
        *)
                echo "Unknown command"; showHelp; exit 1
                ;;
esac


